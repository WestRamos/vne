group = 'com.kotcrab.vne'

apply plugin: "java"
apply plugin: 'maven'
apply from: '../deploy.gradle'

archivesBaseName = "vne-win-thumbnails"
sourceCompatibility = 1.6
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

eclipse.project {
    name = appName + "-win-thumbnails"
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name 'vne-win-thumbnails'
                artifactId 'vne-win-thumbnails'
                packaging 'jar'
                description 'Fast and memory efficient images thumbnails provider using WinAPI'
            }
        }
    }
}

task generateJniHeaders(type: Exec, dependsOn: ['classes']) {
    def classpath = sourceSets.main.output.classesDirs.asPath //+ ":" +
    def runtimeClasspath = project(':runtime').sourceSets.main.output.classesDirs.asPath
    def fullClasspath = classpath + File.pathSeparator + runtimeClasspath
    def nativeIncludes = "src/main/jni"
    commandLine "javah", "-d", nativeIncludes, "-cp", fullClasspath, "com.kotcrab.vne.win.thumbnails.WinThumbnailProvider"
}

task buildDll32(type: Exec) {
    commandLine 'MSBuild', 'WinThumbnails/WinThumbnails.sln', '/property:Configuration=Release', '/property:Platform=x86'
}

task buildDll64(type: Exec) {
    commandLine 'MSBuild', 'WinThumbnails/WinThumbnails.sln', '/property:Configuration=Release', '/property:Platform=x64'
}

task copyDll(dependsOn: ['buildDll64', 'buildDll32']) {
    doLast {
        copy {
            from 'WinThumbnails/Release/WinThumbnails.dll'
            into 'src/main/resources/win32/'
        }

        copy {
            from 'WinThumbnails/x64/Release/WinThumbnails.dll'
            into 'src/main/resources/win64/'
        }
    }
}

task buildAndTest(dependsOn: ['buildDll64', 'copyDll', 'test']) {
    doLast {}
}

